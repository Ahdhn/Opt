
/* -*- c++ -*- */
{ 
    entities = { 
        result = VisibleEntity { 
            model = "resultModel"; 
        }; 
        
        camera = Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -100; 
                farSharpPlaneZ = -40; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "NONE"; 
                nearBlurRadiusFraction = 0.015; 
                nearBlurryPlaneZ = -0.25; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.0; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1; 
                toneCurve = Spline { 
                    control = ( 0, 0.1, 0.2, 0.5, 1 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time = ( 0, 0.1, 0.2, 0.5, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.00; 
                vignetteSizeFraction = 0.0; 
                vignetteTopStrength = 0.0; 
            }; 
            
            frame = CFrame::fromXYZYPRDegrees(0.038389, 0.26569, -5.3587, -179.91, 1.1457, 0); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 0.5; 
                enabled = false; 
                exposureFraction = 0.75; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 27; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -200; 
                fovDegrees = 25; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 

        keyLight = Light { 
            attenuation = ( 0, 0, 1 ); 
            bulbPower = Power3(4e+002 ); 
            castsShadows = true; 
            enabled = true; 
            frame = CFrame::fromXYZYPRDegrees(1.2167, -2.1158, 6.5216, 10.886, 25.21, 0); 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(2048, 2048 ); 
            spotHalfAngleDegrees = 15; 
            spotSquare = true; 
            type = "SPOT"; 
        };

        
        sun = Light { 
            attenuation = ( 0, 0, 1 ); 
            bulbPower = Power3(4e+006 ); 
            castsShadows = true; 
            enabled = true; 
			shadowMapBias = 0.05;
            frame = CFrame::fromXYZYPRDegrees(-15.5767, 207.755, -41.952, -164.03, -76.7166, 76.514 ); 
            nearPlaneZLimit = -170; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(2048, 2048 ); 
            spotHalfAngleDegrees = 5; 
            spotSquare = true; 
            type = "SPOT"; 
        };
        skybox = Skybox { 
            texture = "cubemap/whiteroom/whiteroom-*.png"; 
        };
        
    }; 
    
    lightingEnvironment = LightingEnvironment { 
        ambientOcclusionSettings = AmbientOcclusionSettings { 
            bias = 0.008125; 
            blurRadius = 0; 
            blurStepSize = 2; 
            depthPeelSeparationHint = 0.104059; 
            edgeSharpness = 1; 
            enabled = true; 
            highQualityBlur = true; 
            intensity = 2.18812; 
            monotonicallyDecreasingBilateralWeights = false; 
            numSamples = 99; 
            packBlurKeys = false; 
            radius = 0.526345; 
            temporalFilterSettings = TemporalFilter::Settings { 
                falloffEndDistance = 0.07; 
                falloffStartDistance = 0.05; 
                hysteresis = 0; 
            }; 
            
            temporallyVarySamples = false; 
            useDepthPeelBuffer = true; 
            useNormalBuffer = true; 
            useNormalsInBlur = true; 
            zStorage = "HALF"; 
        }; 
        
         environmentMap = Texture::Specification { 
            filename = "cubemap/uffizi/uffizi*.jpg"; 
            encoding = Texture::Encoding {
                readMultiplyFirst = 0.6;
            };
        }; 
    }; 
    
    models = { 
        resultModel = ArticulatedModel::Specification { 
            //filename = "out.off"; 
            filename = "../../../Examples/MeshDeformationARAP/Armadillo.ply"; 
            scale = 0.01; 
            stripMaterials = true; 

            // Avoid the potentially-slow welding step
            cleanGeometrySettings = CleanGeometrySettings {
                forceVertexMerging = false;
                allowVertexMerging = false;
            };

            preprocess = ( 
                setMaterial(all(), UniversalMaterial::Specification { 
                        glossy = Color4(0.6, 0.6, 0.6, 0.5 ); 
                        lambertian = Color3(0.9 ); 
                        mirrorHint = "STATIC_PROBE"; 
                    } ) ); 

        };   
    }; 
    
    name = "Mesh"; 
} 